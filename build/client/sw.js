"use strict";class e{constructor(e){this.name="MethodNotFound"}}class t{constructor(e,t){this.view=e,this.Model=t}getView(e,t){const{pathname:n}=new URL(e),{method:i}=t,r=this.constructor.route,a=n.match(r+"/(.+)/");if("GET"===i){const i=n.match(r+"/(.+)/");return n.match(r+"/new")?this.create(e):n.match(r+"/(.+)/edit$")?this.edit(e,i[1],t):n.match(r+"/(.+)/")?this.get(e,i[1],t):this.getAll(e,t)}if("POST"===i){if(n.match(r+"/*$"))return this.post(e,t);if(n.match(r+"/(.+)/edit$"))return this.put(e,a[1],t);if(n.match(r+"/(.+)/delete$")){const i=n.match(r+"/(.+)/");return this.del(e,i[1],t)}}else{if("PUT"===i)return this.put(e,a[1],t);if("DELETE"===i){const i=n.match(r+"/(.+)/");return this.del(e,i[1],t)}}}redirect(e){return Response.redirect(e,"302")}create(t){throw new e("create")}edit(t){throw new e("")}get(t){throw new e("get")}getAll(t){throw new e("getAll")}post(t){throw new e("post")}del(t){throw new e("delete")}}class n extends t{render(e){}}const i=[],r=new n;class a extends Error{constructor(e){super(e)}}const s=async e=>{const t=await e.arrayBuffer(),n=new TextDecoder("utf-8");return new URLSearchParams("?"+n.decode(t))};class o extends t{static get route(){return"/feeds"}async create(e,t){return this.view.create(new this.Model)}async post(e,t){const n=await s(t),i=n.get("startDate"),r=n.get("startTime"),a=n.get("endDate"),d=n.get("endTime"),l=new Date(`${i}T${r}`),c=a&&d?new Date(`${a}T${a}`):void 0;return new this.Model({startTime:l,endTime:c}).put(),this.redirect(o.route)}async edit(e,t){const n=await this.Model.get(parseInt(t,10));if(0==!!n)throw new a(`Feed ${t} not found`);return this.view.edit(n)}async put(e,t,n){const i=await this.Model.get(parseInt(t,10));if(0==!!i)throw new a(`Feed ${t} not found`);const r=await s(n),d=r.get("startDate"),l=r.get("startTime"),c=r.get("endDate"),m=r.get("endTime");return i.startTime=new Date(`${d}T${l}`),i.endTime=c&&m?new Date(`${c}T${m}`):void 0,i.put(),this.redirect(o.route)}async get(e,t){const n=await this.Model.get(parseInt(t,10));if(0==!!n)throw new a(`Feed ${t} not found`);return this.view.get(n)}async getAll(e){const t=await this.Model.getAll("type,startTime",{filter:["BETWEEN",["feed",new Date(0)],["feed",new Date(99999999999999)]],order:this.Model.DESCENDING})||[];return this.view.getAll(t)}async del(e,t){const n=await this.Model.get(parseInt(t,10));if(0==!!n)throw new a(`Feed ${t} not found`);return await n.delete(),this.redirect(o.route)}}class d extends t{static get route(){return"^/$"}async getAll(e){const t=await this.Model.getAll("startTime,type",{filter:["BETWEEN",[new Date(0),"a"],[new Date(9999999999999),"z"]],order:this.Model.DESCENDING})||[];return this.view.getAll(t)}get(e){return this.view.render({title:"Ay....",newTitle:"Testing"})}}class l extends t{static get route(){return"/sleeps"}async create(e,t){return this.view.create(new this.Model)}async post(e,t){const n=await s(t),i=n.get("startDate"),r=n.get("startTime"),a=n.get("endDate"),o=n.get("endTime"),d=new Date(`${i}T${r}`),c=a&&o?new Date(`${a}T${o}`):void 0;return new this.Model({startTime:d,endTime:c}).put(),this.redirect(l.route)}async edit(e,t){const n=await this.Model.get(parseInt(t,10));if(0==!!n)throw new a(`Sleep ${t} not found`);return this.view.edit(n)}async put(e,t,n){const i=await this.Model.get(parseInt(t,10));if(0==!!i)throw new a(`Sleep ${t} not found`);const r=await s(n),o=r.get("startDate"),d=r.get("startTime"),c=r.get("endDate"),m=r.get("endTime");return i.startTime=new Date(`${o}T${d}`),i.endTime=c&&m?new Date(`${c}T${m}`):void 0,i.put(),this.redirect(l.route)}async get(e,t){const n=await this.Model.get(parseInt(t,10));if(0==!!n)throw new a(`Sleep ${t} not found`);return this.view.get(n)}async getAll(e){const t=await this.Model.getAll("type,startTime",{filter:["BETWEEN",["sleep",new Date(0)],["sleep",new Date(99999999999999)]],order:this.Model.DESCENDING})||[];return this.view.getAll(t)}async del(e,t){const n=await this.Model.get(parseInt(t,10));if(0==!!n)throw new a(`Sleep ${t} not found`);return await n.delete(),this.redirect(l.route)}}class c extends t{static get route(){return"/wees"}async create(e,t){return this.view.create(new this.Model)}async post(e,t){const n=await s(t),i=`${n.get("startDate")}T${n.get("startTime")}`;return new this.Model({startTime:i}).put(),this.redirect(c.route)}async edit(e,t){const n=await this.Model.get(parseInt(t,10));if(0==!!n)throw new a(`Wee ${t} not found`);return this.view.edit(n)}async put(e,t,n){const i=await this.Model.get(parseInt(t,10));if(0==!!i)throw new a(`Wee ${t} not found`);const r=await s(n),o=r.get("startDate"),d=r.get("startTime");return i.startTime=new Date(`${o}T${d}`),i.put(),this.redirect(c.route)}async get(e,t){const n=await this.Model.get(parseInt(t,10));if(0==!!n)throw new a(`Wee ${t} not found`);return this.view.get(n)}async getAll(e){const t=await this.Model.getAll("type,startTime",{filter:["BETWEEN",["wee",new Date(0)],["wee",new Date(99999999999999)]],order:this.Model.DESCENDING})||[];return this.view.getAll(t)}async del(e,t){const n=await this.Model.get(parseInt(t,10));if(0==!!n)throw new a(`Wee ${t} not found`);return await n.delete(),this.redirect(c.route)}}class m extends t{static get route(){return"/poops"}async create(e,t){return this.view.create(new this.Model)}async post(e,t){const n=await s(t),i=`${n.get("startDate")}T${n.get("startTime")}`;return new this.Model({startTime:i}).put(),this.redirect(m.route)}async edit(e,t){const n=await this.Model.get(parseInt(t,10));if(0==!!n)throw new a(`Poop ${t} not found`);return this.view.edit(n)}async put(e,t,n){const i=await this.Model.get(parseInt(t,10));if(0==!!i)throw new a(`Poop ${t} not found`);const r=await s(n),o=r.get("startDate"),d=r.get("startTime");return i.startTime=new Date(`${o}T${d}`),i.put(),this.redirect(m.route)}async get(e,t){const n=await this.Model.get(parseInt(t,10));if(0==!!n)throw new a(`Poop ${t} not found`);return this.view.get(n)}async getAll(e){const t=await this.Model.getAll("type,startTime",{filter:["BETWEEN",["poop",new Date(0)],["poop",new Date(99999999999999)]],order:this.Model.DESCENDING})||[];return this.view.getAll(t)}async del(e,t){const n=await this.Model.get(parseInt(t,10));if(0==!!n)throw new a(`Poop ${t} not found`);return await n.delete(),this.redirect(m.route)}}const u=new TextEncoder,p=async(e,t)=>{const n=e.getReader();return n.read().then((function e(i){if(!i.done)return i.value&&t.enqueue(i.value),n.read().then(e)}))},h=async(e,t)=>{if(e instanceof globalThis.ReadableStream)await p(e,t);else if(e instanceof Promise){let n;n=await e,n instanceof globalThis.ReadableStream?await p(n,t):await h(n,t)}else if(Array.isArray(e))for(let n of e)await h(n,t);else e&&t.enqueue(u.encode(e))};var g=async(e,...t)=>("ReadableStream"in globalThis==!1&&(globalThis={...globalThis,...await Promise.resolve().then((function(){return require("./streams-6a7ac95a.js")}))}),new globalThis.ReadableStream({start(n){!async function(){let i=0;for(;i<t.length;){let r=e[i];n.enqueue(u.encode(r)),await h(t[i],n),i++}n.enqueue(u.encode(e[i])),n.close()}()}}));const f=(e,t)=>g`<!DOCTYPE html>
<html>
  <head>
    <title>Baby Logger</title>
    <script src="/client.js" type="module" defer></script>
    <link rel="stylesheet" href="/styles/main.css">
    <link rel="manifest" href="/manifest.json">
    <meta name="viewport" content="width=device-width">
  </head>
  ${t}
</html>`,w=(e,t)=>g`
  <header>
    <h1>Baby Log</h1>
    <div><a href="/">All</a>, <a href="/feeds">Feeds</a>, <a href="/sleeps">Sleeps</a>, <a href="/poops">Poops</a>,  <a href="/wees">Wees</a></div>
    </header>
  <main>
    <header>
      <h2>${e.header}</h2>
    </header>
    <section>
    ${t}
    </section>
  </main>
  <footer>
    <span>Add</span><a href="/feeds/new" title="Add a feed">üçº</a><a href="/sleeps/new" title="Add a Sleep">üí§</a><a href="/poops/new" title="Add a Poop">üí©</a><a href="/wees/new" title="Add a Wee">‚õ≤Ô∏è</a>
  </footer>
  `;"navigator"in globalThis==!1&&(globalThis.navigator={language:"en-GB"});const v=e=>{const t=Math.floor(e/36e5);e-=1e3*t*60*60;const n=Math.floor(e/6e4);return`${t} ${1==t?"Hour":"Hours"} ${n} ${1==n?"Minute":"Minutes"}`},y=e=>{const t=[],n=navigator.language,i={weekday:"long",year:"numeric",month:"long",day:"numeric"};let r,a={},s={},o=!0;for(let d of e)d.startTime.toLocaleDateString(n,i)!=r&&(0==o&&(t.push(g`<div>${Object.entries(a).map(([e,t])=>`${t} ${e}${t>1?"s":""}`).join(", ")}</div>`),t.push(g`<div>${Object.entries(s).map(([e,t])=>`${v(t)} ${e}ing`).join(", ")}</div>`),a={}),o=!1,r=d.startTime.toLocaleDateString(n,i),t.push(g`<h3>${r}</h3>`)),d.type in a==0&&(a[d.type]=0),a[d.type]++,d.isDuration&&d.hasFinished&&(d.type in s==0&&(s[d.type]=0),s[d.type]+=d.duration),t.push(g`<div class="row">
      <img src="/images/icons/${d.type}/res/mipmap-xxhdpi/${d.type}.png" alt="${d.type}"><span>
        ${d.startTime.toLocaleTimeString(navigator.language,{hour:"numeric",minute:"numeric"})} 
        ${d.isDuration?`- ${v(d.duration)} ${!1===d.hasFinished?`(Still ${d.type}ing)`:""} `:""}
        </span>
        <a href="/${d.type}s/${d.id}/edit"><img src="/images/icons/ui/edit_18dp.png"></a><button class="delete row" form="deleteForm${d.id}"><img src="/images/icons/ui/delete_18dp.png"></button>
        <form id="deleteForm${d.id}" class="deleteForm" method="POST" action="/${d.type}s/${d.id}/delete"></form>
    </div>`);return t.push(g`<div>${Object.entries(a).map(([e,t])=>`${t} ${e}${t>1?"s":""}`).join(", ")}</div>`),t.push(g`<div>${Object.entries(s).map(([e,t])=>`${v(t)} ${e}ing`).join(", ")}</div>`),t},$=e=>{const t=6e4*(new Date).getTimezoneOffset();return new Date(e-t).toISOString().replace(/:(\d+).(\d+)Z$/,"")},T=e=>(e instanceof Date==!1&&(e=new Date(e)),`${e.getFullYear()}-${(e.getMonth()+1).toString().padStart(2,0)}-${e.getDate().toString().padStart(2,0)}`),D=e=>(e instanceof Date==!1&&(e=new Date(e)),`${e.getHours().toString().padStart(2,0)}:${e.getMinutes().toString().padStart(2,0)}`);"navigator"in globalThis==!1&&(globalThis.navigator={language:"en-GB"});const b={name:"babylog",version:6,stores:{Log:{properties:{autoIncrement:!0,keyPath:"id"},indexes:{"type,startTime":{unique:!0},"startTime,type":{unique:!0}}}}};function S(){return void 0!==globalThis.ConfigManagerInstance_||(globalThis.ConfigManagerInstance_=new P),Promise.resolve(globalThis.ConfigManagerInstance_)}class P{constructor(){this.config=b}set config(e){this.config_=e}get config(){return this.config_}getStore(e){return this.config_.stores[e]}}function F(){return void 0!==globalThis.DatabaseInstance_||(globalThis.DatabaseInstance_=new A),Promise.resolve(globalThis.DatabaseInstance_)}function M(){return"indexedDB"in globalThis}class A{constructor(){S().then(e=>{var t=e.config;this.db_=null,this.name_=t.name,this.version_=t.version,this.stores_=t.stores})}getStore(e){if(!this.stores_[e])throw'There is no store with name "'+e+'"';return this.stores_[e]}async open(){return this.db_?Promise.resolve(this.db_):new Promise((e,t)=>{var n=indexedDB.open(this.name_,this.version_);n.onupgradeneeded=e=>{this.db_=e.target.result;for(var t,n=e.target.transaction,i=Object.keys(this.stores_),r=0;r<i.length;r++){var a;if(t=i[r],this.db_.objectStoreNames.contains(t)){if(this.stores_[t].deleteOnUpgrade){this.db_.deleteObjectStore(t);continue}a=n.objectStore(t)}else a=this.db_.createObjectStore(t,this.stores_[t].properties);if(void 0!==this.stores_[t].indexes){for(var s,o=this.stores_[t].indexes,d=Object.keys(o),l=a.indexNames,c=0;c<d.length;c++)s=d[c],!1===l.contains(s)&&a.createIndex(s,s.split(","),o[s]);for(c=0;c<a.indexNames.length;c++)s=a.indexNames[c],d.indexOf(s)<0&&a.deleteIndex(s)}}},n.onsuccess=t=>{this.db_=t.target.result,e(this.db_)},n.onerror=e=>{t(e)}})}close(){return new Promise((e,t)=>{this.db_||t("No database connection"),this.db_.close(),e(this.db_)})}nuke(){return new Promise((e,t)=>{console.log("Nuking... "+this.name_),this.close();var n=indexedDB.deleteDatabase(this.name_);n.onsuccess=t=>{console.log("Nuked..."),e(t)},n.onerror=e=>{t(e)}})}put(e,t,n){return this.open().then(i=>new Promise((r,a)=>{var s=i.transaction(e,"readwrite"),o=s.objectStore(e).put(t,n);s.oncomplete=e=>{r(o.result)},s.onabort=s.onerror=e=>{a(e)}}))}get(e,t){return this.open().then(n=>new Promise((i,r)=>{var a,s=n.transaction(e,"readonly"),o=s.objectStore(e);s.oncomplete=e=>{i(a.result)},s.onabort=s.onerror=e=>{r(e)},a=o.get(t)}))}getAll(e,t,{filter:n,order:i,cmpFunc:r}){return this.open().then(a=>new Promise((s,o)=>{var d,l=a.transaction(e,"readonly").objectStore(e),c=(([e,...t])=>{const[n,i]=t;switch(e){case"BETWEEN":return IDBKeyRange.bound(n,i,!1,!1);case"=":return IDBKeyRange.only(n);case"<":return IDBKeyRange.upperBound(n);case"<=":return IDBKeyRange.upperBound(n,!0);case">":return IDBKeyRange.lowerBound(n);case">=":return IDBKeyRange.lowerBound(n,!0);default:return}})(n);"string"!=typeof i&&(i="next"),d="string"==typeof t?l.index(t).openCursor(c,i):l.openCursor();var m=[];d.onsuccess=e=>{var t=e.target.result;t?((void 0===r||r(t.value))&&m.push({key:t.key,value:t.value}),t.continue()):s(m)},d.onerror=e=>{o(e)}}))}delete(e,t){return this.open().then(n=>new Promise((i,r)=>{var a=n.transaction(e,"readwrite"),s=a.objectStore(e);a.oncomplete=e=>{i(e)},a.onabort=a.onerror=e=>{r(e)},s.delete(t)}))}deleteAll(e){return this.open().then(t=>new Promise((n,i)=>{var r=t.transaction(e,"readwrite").objectStore(e).clear();r.onsuccess=e=>{n(e)},r.onerror=e=>{i(e)}}))}}class x{constructor(e){this.key=e}static get ASCENDING(){return"next"}static get DESCENDING(){return"prev"}static get UPDATED(){return"Model-updated"}static get storeName(){return"Model"}static nuke(){return F().then(e=>e.close()).then(e=>e.nuke())}static get(e){return!1===M()?Promise.resolve():(this instanceof x&&Promise.reject("Can't call get on Model directly. Inherit first."),F().then(t=>t.get(this.storeName,e)).then(t=>S().then(n=>{var i=n.getStore(this.storeName);if(t){var r=e;return i.properties.keyPath&&(r=void 0),new this(t,r)}})))}static getAll(e,{filter:t,order:n,cmpFunc:i}){return!1===M()?Promise.resolve():(this instanceof x&&Promise.reject("Can't call getAll on Model directly. Inherit first."),F().then(r=>r.getAll(this.storeName,e,{filter:t,order:n,cmpFunc:i})).then(e=>S().then(t=>{var n=t.getStore(this.storeName),i=[];for(let t of e){var r=t.key;n.properties.keyPath&&(r=void 0),i.push(new this(t.value,r))}return i})))}put(){return this.constructor.put(this)}static put(e){return this instanceof x&&Promise.reject("Can't call put on Model directly. Inherit first."),F().then(t=>t.put(this.storeName,e,e.key)).then(t=>S().then(n=>(n.getStore(this.storeName).properties.keyPath||(e.key=t),e)))}static deleteAll(){return this instanceof x&&Promise.reject("Can't call deleteAll on Model directly. Inherit first."),F().then(e=>e.deleteAll(this.storeName)).catch(e=>{if("NotFoundError"!==e.name)throw e})}delete(){return this.constructor.delete(this)}static delete(e){return this instanceof x&&Promise.reject("Can't call delete on Model directly. Inherit first."),S().then(t=>{if(e instanceof this){var n=t.getStore(this.storeName).properties.keyPath;e=n?e[n]:e.key}return F().then(t=>t.delete(this.storeName,e))})}}class E extends x{get hasFinished(){return!!this.endTime}get duration(){let e=this.endTime;return!1==!!e&&(e=new Date),e-this.startTime}constructor({id:e,endTime:t,startTime:n,type:i,isDuration:r=!1},a){super(a),e&&(this.id=e),t&&(this.endTime=new Date(t)),this.startTime=new Date(n),this.isDuration=r,this.type=i}static get storeName(){return"Log"}}class _ extends t{static get route(){return""}constructor(e){super()}async get(e,t,n){return caches.match(n).then(t=>t||fetch(e))}async getAll(e,t){return this.get(e,void 0,t)}}var I=["/client.js","/manifest.json","/sw-manifest.json","/images/icons/feed/res/mipmap-hdpi/feed.png","/images/icons/feed/res/mipmap-mdpi/feed.png","/images/icons/feed/res/mipmap-xhdpi/feed.png","/images/icons/feed/res/mipmap-xxhdpi/feed.png","/images/icons/log/res/mipmap-hdpi/log.png","/images/icons/log/res/mipmap-mdpi/log.png","/images/icons/log/res/mipmap-xhdpi/log.png","/images/icons/log/res/mipmap-xxhdpi/log.png","/images/icons/poop/res/mipmap-hdpi/poop.png","/images/icons/poop/res/mipmap-mdpi/poop.png","/images/icons/poop/res/mipmap-xhdpi/poop.png","/images/icons/poop/res/mipmap-xxhdpi/poop.png","/images/icons/sleep/res/mipmap-hdpi/sleep.png","/images/icons/sleep/res/mipmap-mdpi/sleep.png","/images/icons/sleep/res/mipmap-xhdpi/sleep.png","/images/icons/sleep/res/mipmap-xxhdpi/sleep.png","/images/icons/ui/add_18dp.png","/images/icons/ui/delete_18dp.png","/images/icons/ui/edit_18dp.png","/images/icons/wee/res/mipmap-hdpi/wee.png","/images/icons/wee/res/mipmap-mdpi/wee.png","/images/icons/wee/res/mipmap-xhdpi/wee.png","/images/icons/wee/res/mipmap-xxhdpi/wee.png","/styles/main.css","/client.js.map","/streams-6a7ac95a.js","/streams-6a7ac95a.js.map","/streams-abe0310a.js","/streams-abe0310a.js.map"];const N=new class{get routes(){return i}registerRoute(e,t){i.push({route:e,controller:t})}resolve(e){const{pathname:t}=e;for(let{route:e,controller:n}of i)if(t.match(e))return n;return r}};N.registerRoute(d.route,new d(new class{async getAll(e){return e.type="All",e.header="All",g`${f(0,w(e,g`${y(e)}`))}`}},E)),N.registerRoute(o.route,new o(new class{async getAll(e){return e.type="Feed",e.header="Feeds",g`${f(0,w(e,g`${y(e)}`))}`}async get(e){e.header="Feed";const t=navigator.language,n={weekday:"long",year:"numeric",month:"long",day:"numeric",hour:"numeric",minute:"numeric"};return g`${f(0,w(e,g`<div>Start time: ${e.startTime.toLocaleString(t,n)}</div>
        <div>End time: ${e.endTime?e.endTime.toLocaleString(t,n):""}</div>
        <a href="/${e.type}s/${e.id}/edit"><img src="/images/icons/ui/edit_18dp.png"></a>
        <div class="row">
        <form method="POST" id="deleteForm" action="/${e.type}s/${e.id}/delete"></form>
        <button form="deleteForm" class="delete"><img src="/images/icons/ui/delete_18dp.png"></button>
        </div>`))}`}async create(e){return e.header="Add a Feed",g`${f(0,w(e,`<div class="form">\n    <form method="POST" action="/${e.type}s">\n    <div>\n      <label for=startDate>Start time: \n        <input type="date" name="startDate" value="${T($(new Date))}">\n        <input type="time" name="startTime" value="${D($(new Date))}">\n      </label>\n    </div>\n    <div>\n      <label for=endDate>End time: \n        <input type="date" name="endDate" value="">\n        <input type="time" name="endTime" value="">\n      </label>\n    </div>\n    <div class="controls">\n      <input type="submit" value="Save">\n    </div>\n  </form></div>`))}`}async edit(e){return e.header="Update a Feed",g`${f(0,w(e,`<div class="form">\n      <form method="POST" id="deleteForm" action="/${e.type}s/${e.id}/delete"></form>\n      <form method="POST" id="editForm" action="/${e.type}s/${e.id}/edit"></form>\n      <div>\n        <div>\n          <label for=startDate>Start time: \n            <input type="date" name="startDate" form="editForm" value="${T($(e.startTime))}">\n            <input type="time" name="startTime" form="editForm" value="${D($(e.startTime))}">\n          </label>\n        </div>\n        <div>\n          <label for=endDate>End time: \n            <input type="date" name="endDate" form="editForm" value="${T($(e.endTime||new Date))}">\n            <input type="time" name="endTime" form="editForm" value="${D($(e.endTime||new Date))}">\n          </label>\n        <div>\n        <div class="controls">\n          <button form="deleteForm" class="delete"><img src="/images/icons/ui/delete_18dp.png"></button>\n          <input type="submit" form="editForm" value="Save">\n        </div>\n      </div>\n    </div>\n    `))}`}},class extends E{constructor(e={},t){super({...e,isDuration:!0},t),this.type="feed"}})),N.registerRoute(l.route,new l(new class{async getAll(e){return e.type="Sleeps",e.header="Sleeps",g`${f(0,w(e,g`${y(e)}`))}`}async get(e){e.header="Sleep";const t=navigator.language,n={weekday:"long",year:"numeric",month:"long",day:"numeric",hour:"numeric",minute:"numeric"};return g`${f(0,w(e,g`<div>Start time: ${e.startTime.toLocaleString(t,n)}</div>
        <div>End time: ${e.endTime?e.endTime.toLocaleString(t,n):""}</div>`))}`}async create(e){return e.header="Add a Sleep",g`${f(0,w(e,`<div class="form">\n    <form method="POST" action="/${e.type}s">\n    <div>\n      <label for=startDate>Start time: \n        <input type="date" name="startDate" value="${T($(new Date))}">\n        <input type="time" name="startTime" value="${D($(new Date))}">\n      </label>\n    </div>\n    <div>\n      <label for=endDate>End time: \n        <input type="date" name="endDate" value="">\n        <input type="time" name="endTime" value="">\n      </label>\n    </div>\n    <div class="controls">\n      <input type="submit" value="Save">\n    </div>\n  </form></div>`))}`}async edit(e){return e.header="Update a Sleep",g`${f(0,w(e,`<div class="form">\n      <form method="POST" id="deleteForm" action="/${e.type}s/${e.id}/delete"></form>\n      <form method="POST" id="editForm" action="/${e.type}s/${e.id}/edit"></form>\n      <div>\n        <div>\n          <label for=startDate>Start time: \n            <input type="date" name="startDate" form="editForm" value="${T($(e.startTime))}">\n            <input type="time" name="startTime" form="editForm" value="${D($(e.startTime))}">\n          </label>\n        </div>\n        <div>\n          <label for=endDate>End time: \n            <input type="date" name="endDate" form="editForm" value="${T($(e.endTime||new Date))}">\n            <input type="time" name="endTime" form="editForm" value="${D($(e.endTime||new Date))}">\n          </label>\n        <div>\n        <div class="controls">\n          <button form="deleteForm" class="delete"><img src="/images/icons/ui/delete_18dp.png"></button>\n          <input type="submit" form="editForm" value="Save">\n        </div>\n      </div>\n    </div>\n    `))}`}},class extends E{constructor(e={},t){super({...e,isDuration:!0},t),this.type="sleep"}})),N.registerRoute(m.route,new m(new class{async getAll(e){return e.type="Poop",e.header="Poops",g`${f(0,w(e,g`${y(e)}`))}`}async get(e){e.header="Poop";const t=navigator.language,n={weekday:"long",year:"numeric",month:"long",day:"numeric",hour:"numeric",minute:"numeric"};return g`${f(0,w(e,g`<div>Start time: ${e.startTime.toLocaleString(t,n)}</div>
        <div>End time: ${e.endTime?e.endTime.toLocaleString(t,n):""}</div>`))}`}async create(e){return e.header="Add a Poop",g`${f(0,w(e,`<div class="form">\n    <form method="POST" action="/${e.type}s">\n    <div>\n      <label for=startDate>Start time: \n        <input type="date" name="startDate" value="${T($(new Date))}">\n        <input type="time" name="startTime" value="${D($(new Date))}">\n      </label>\n    </div>\n    <div class="controls">\n      <input type="submit" value="Save">\n    </div>\n  </form></div>`))}`}async edit(e){return e.header="Update a Poop",g`${f(0,w(e,`<div class="form">\n    <form method="POST" id="deleteForm" action="/${e.type}s/${e.id}/delete"></form>\n    <form method="POST" id="editForm" action="/${e.type}s/${e.id}/edit"></form>\n    <div>\n      <div>\n        <label for=startDate>Start time: \n          <input type="date" name="startDate" form="editForm" value="${T($(e.startTime))}">\n          <input type="time" name="startTime" form="editForm" value="${D($(e.startTime))}">\n        </label>\n      </div>\n      <div class="controls">\n        <button form="deleteForm" class="delete"><img src="/images/icons/ui/delete_18dp.png"></button>\n        <input type="submit" form="editForm" value="Save">\n      </div>\n    </div>\n    `))}`}},class extends E{constructor(e={},t){super(e,t),this.type="poop"}})),N.registerRoute(c.route,new c(new class{async getAll(e){return e.type="Wee",e.header="Wees",g`${f(0,w(e,g`${y(e)}`))}`}async get(e){e.header="Wee";const t=navigator.language,n={weekday:"long",year:"numeric",month:"long",day:"numeric",hour:"numeric",minute:"numeric"};return g`${f(0,w(e,g`<div>Start time: ${e.startTime.toLocaleString(t,n)}</div>
        <div>End time: ${e.endTime?e.endTime.toLocaleString(t,n):""}</div>`))}`}async create(e){return e.header="Add a Wee",g`${f(0,w(e,`<div class="form">\n  <form method="POST" action="/${e.type}s">\n    <div>\n      <label for=startDate>Start time: \n        <input type="date" name="startDate" value="${T($(new Date))}">\n        <input type="time" name="startTime" value="${D($(new Date))}">\n      </label>\n    </div>\n    <div class="controls">\n      <input type="submit" value="Save">\n    </div>\n  </form>\n</div>`))}`}async edit(e){return e.header="Update a Wee",g`${f(0,w(e,`<div class="form">\n    <form method="POST" id="deleteForm" action="/${e.type}s/${e.id}/delete"></form>\n    <form method="POST" id="editForm" action="/${e.type}s/${e.id}/edit"></form>\n    <div>\n      <div>\n        <label for=startDate>Start time: \n          <input type="date" name="startDate" form="editForm" value="${T($(e.startTime))}">\n          <input type="time" name="startTime" form="editForm" value="${D($(e.startTime))}">\n        </label>\n      </div>\n      <div class="controls">\n        <button form="deleteForm" class="delete"><img src="/images/icons/ui/delete_18dp.png"></button>\n        <input type="submit" form="editForm" value="Save">\n      </div>\n    </div>\n    `))}`}},class extends E{constructor(e={},t){super(e,t),this.type="wee"}})),N.registerRoute(_.route,new _),self.onfetch=e=>{const{request:t}=e,i=new URL(t.url),r=N.resolve(i);if(r instanceof n)return;const a=r.getView(i,t);return a?e.respondWith(a.then(e=>{if(e instanceof Response)return e;return new Response(e||"Not Found",{status:e?200:404,headers:{"Content-Type":"text/html; charset=utf-8"}})}).catch(e=>new Response(e.toString(),{status:404,headers:{"Content-Type":"text/html"}}))):void 0},self.oninstall=async e=>{e.waitUntil(caches.open("v1").then(async e=>e.addAll(I))),self.skipWaiting()},self.onactivate=e=>{e.waitUntil(clients.claim())};
//# sourceMappingURL=sw.js.map
